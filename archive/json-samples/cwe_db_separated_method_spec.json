{
  "1": {
    "task_id": "1",
    "task_description": "The task is to generate a code in Dafny which takes a file and a path as its parameters and appends the file to the path",
    "method_signature": "method Append(path: seq<char>,  fname: seq<char>)",
    "api_with_preconditions": "- static method{:axiom} Open(name: seq<char>) returns(ok:bool, f:FileStream)\n requires non_empty_string(name)\n requires !has_dangerous_pattern(name)\n requires has_absoloute_path(name)\n requires is_valid_path_name(name)\n ensures  ok ==> fresh(f) && f.IsOpen() && f.Name() == name[..]\n\n - method Join(p: path, f: file) returns(result: path)\n requires non_empty_string(f)\n requires non_empty_string(p)\n requires !has_dangerous_pattern(f)\n requires has_absoloute_path(f)\n requires is_valid_file_name(f)\n requires is_valid_path_name(p)\n requires has_valid_file_length(f)\n requires has_valid_path_length(p)\n requires has_valid_path_length(p+f)\n\n - method{:axiom} Read(p: path, fileOffset:nat32, buffer:array<byte>, start:int32, end:int32) returns(ok:bool)\n  requires non_empty_string(p)\n  requires !has_dangerous_pattern(p)\n  requires has_valid_path_length(p)\n  requires has_absoloute_path(p)\n  requires is_valid_file_extension(p)\n  requires has_valid_content_length(buffer)\n  requires is_valid_file_extension(p)\n  requires is_valid_file_extension(p)\n  requires IsOpen()\n  requires 0 <= start as int <= end as int <= buffer.Length\n  modifies buffer\n  modifies this\n  ensures  Name() == old(Name())\n  ensures  ok ==> IsOpen()\n\n- method{:axiom} Write(p: path, fileOffset:nat32, buffer:array<byte>, start:int32, end:int32) returns(ok:bool)\n requires !has_dangerous_pattern(p)\n requires has_valid_path_length(p)\n requires has_absoloute_path(p)\n requires is_valid_path_name(p)\n requires has_valid_content_length(buffer)\n requires is_valid_file_extension(p)\n requires 0 <= start as int32 <= end as int32\n requires IsOpen()\n modifies this\n ensures  Name() == old(Name())\n ensures  ok ==> IsOpen()",
    "code": "method Append(path: seq<char>,  fname: seq<char>) returns (jointPath: seq<char>)\n requires !has_dangerous_pattern(fname)\n requires !has_dangerous_pattern(path)\n requires has_absoloute_path(fname)\n requires is_valid_path_name(path)\n requires is_valid_file_name(fname)\n requires has_valid_file_length(fname)\n requires has_valid_path_length(path)\n requires has_valid_path_length(path + fname)\n requires append_file_to_path(path, fname) == path + fname\n {\n   jointPath := Join(path, fname);\n }"
  },
  "2": {
    "task_id": "2",
    "task_description": "The task is to generate a code in Dafny which takes a path and a user's data as its parameters and save the user's data into the given path",
    "method_signature": "method SaveToFile(path: seq<char>, userData: seq<char>)",
    "api_with_preconditions": "- static method{:axiom} Open(name: seq<char>) returns(ok:bool, f:FileStream)\n requires non_empty_string(name)\n requires !has_dangerous_pattern(name)\n requires has_absoloute_path(name)\n requires is_valid_path_name(name)\n ensures  ok ==> fresh(f) && f.IsOpen() && f.Name() == name[..]\n\n- method{:axiom} Write(p: path, fileOffset:nat32, buffer:array<byte>, start:int32, end:int32) returns(ok:bool)\n requires !has_dangerous_pattern(p)\n requires has_valid_path_length(p)\n requires has_absoloute_path(p)\n requires is_valid_path_name(p)\n requires has_valid_content_length(buffer)\n requires is_valid_file_extension(p)\n requires 0 <= start as int32 <= end as int32\n requires IsOpen()\n modifies this\n ensures  Name() == old(Name())\n ensures  ok ==> IsOpen() \n\n - method{:axiom} Read(p: path, fileOffset:nat32, buffer:array<byte>, start:int32, end:int32) returns(ok:bool)\n  requires non_empty_string(p)\n  requires !has_dangerous_pattern(p)\n  requires has_valid_path_length(p)\n  requires has_absoloute_path(p)\n  requires is_valid_file_extension(p)\n  requires has_valid_content_length(buffer)\n  requires is_valid_file_extension(p)\n  requires is_valid_file_extension(p)\n  requires IsOpen()\n  requires 0 <= start as int <= end as int <= buffer.Length\n  modifies buffer\n  modifies this\n  ensures  Name() == old(Name())\n  ensures  ok ==> IsOpen()\n\n - method Join(p: path, f: file) returns(result: path)\n requires non_empty_string(f)\n requires non_empty_string(p)\n requires !has_dangerous_pattern(f)\n requires has_absoloute_path(f)\n requires is_valid_file_name(f)\n requires is_valid_path_name(p)\n requires has_valid_file_length(f)\n requires has_valid_path_length(p)\n requires has_valid_path_length(p+f)",
    "code": "method SaveToFile(path: seq<char>, userData: seq<char>)\n requires !has_dangerous_pattern(path)\n requires has_valid_path_length(path)\n requires non_empty_string(path)\n requires is_valid_str_length(userData)\n requires has_absoloute_path(path)\n requires is_valid_path_name(path)\n requires is_valid_file_name(userData)\n requires is_valid_file_extension(path)\n {\n     var f: FileStream;\n     var ok: bool;\n     var data: array<byte> := ArrayFromSeq(string_to_bytes(userData));\n     ok, f := FileStream.Open(path);\n     if !ok { print \"open failed\"; return; }\n     if ( data.Length == 0 ) { print \"Empty data\"; return; }\n     ok := f.Write(path, 0, data, 0, data.Length as int32);\n     print \"Safe write operation\";\n }"
 },
  "3": {
  "task_id": "3",
  "task_description": "The task is to generate a code in Dafny which takes a path as its parameter and reads its content",
  "method_signature": "method ReadFile(path: seq<char>)",
  "api_with_preconditions": "- static method{:axiom} Open(name: seq<char>) returns(ok:bool, f:FileStream)\n requires non_empty_string(name)\n requires !has_dangerous_pattern(name)\n requires has_absoloute_path(name)\n requires is_valid_path_name(name)\n ensures  ok ==> fresh(f) && f.IsOpen() && f.Name() == name[..]\n\n- method{:axiom} Read(p: path, fileOffset:nat32, buffer:array<byte>, start:int32, end:int32) returns(ok:bool)\n  requires non_empty_string(p)\n  requires !has_dangerous_pattern(p)\n  requires has_valid_path_length(p)\n  requires has_absoloute_path(p)\n  requires is_valid_file_extension(p)\n  requires has_valid_content_length(buffer)\n  requires is_valid_file_extension(p)\n  requires is_valid_file_extension(p)\n  requires IsOpen()\n  requires 0 <= start as int <= end as int <= buffer.Length\n  modifies buffer\n  modifies this\n  ensures  Name() == old(Name())\n  ensures  ok ==> IsOpen() \n\n - method{:axiom} Write(p: path, fileOffset:nat32, buffer:array<byte>, start:int32, end:int32) returns(ok:bool)\n requires !has_dangerous_pattern(p)\n requires has_valid_path_length(p)\n requires has_absoloute_path(p)\n requires is_valid_path_name(p)\n requires has_valid_content_length(buffer)\n requires is_valid_file_extension(p)\n requires 0 <= start as int32 <= end as int32\n requires IsOpen()\n modifies this\n ensures  Name() == old(Name())\n ensures  ok ==> IsOpen()\n\n - method Join(p: path, f: file) returns(result: path)\n requires non_empty_string(f)\n requires non_empty_string(p)\n requires !has_dangerous_pattern(f)\n requires has_absoloute_path(f)\n requires is_valid_file_name(f)\n requires is_valid_path_name(p)\n requires has_valid_file_length(f)\n requires has_valid_path_length(p)\n requires has_valid_path_length(p+f)",
  "code": "method ReadFile(path: seq<char>)\n requires !has_dangerous_pattern(path)\n requires is_valid_path_name(path)\n requires non_empty_string(path)\n requires is_valid_file_extension(path)\n requires has_valid_path_length(path)\n requires has_absoloute_path(path)\n requires has_valid_path_length(path)\n requires is_valid_file_extension(path)\n {\n     var f: FileStream;\n     var ok: bool;\n     ok, f := FileStream.Open(path);\n     if !ok { print \"open failed\"; return; }\n     var data := new byte[100];\n     ok := f.Read(path, 0, data, 0, data.Length as int32);\n     print \"Read operation terminated safely\";\n }"
    },
  "4": {
  "task_id": "4",
  "task_description": "The task is to generate a code in Dafny which takes a source path and a destination path as its parameters and copies from the source file to the destination file",
  "method_signature": "method Copy(srcFile: seq<char>, dstFile: seq<char>)",
  "api_with_preconditions": "- static method{:axiom} Open(name: seq<char>) returns(ok:bool, f:FileStream)\n requires non_empty_string(name)\n requires !has_dangerous_pattern(name)\n requires has_absoloute_path(name)\n requires is_valid_path_name(name)\n ensures  ok ==> fresh(f) && f.IsOpen() && f.Name() == name[..]\n\n - method{:axiom} Read(p: path, fileOffset:nat32, buffer:array<byte>, start:int32, end:int32) returns(ok:bool)\n  requires non_empty_string(p)\n  requires !has_dangerous_pattern(p)\n  requires has_valid_path_length(p)\n  requires has_absoloute_path(p)\n  requires is_valid_file_extension(p)\n  requires has_valid_content_length(buffer)\n  requires is_valid_file_extension(p)\n  requires is_valid_file_extension(p)\n  requires IsOpen()\n  requires 0 <= start as int <= end as int <= buffer.Length\n  modifies buffer\n  modifies this\n  ensures  Name() == old(Name())\n  ensures  ok ==> IsOpen()\n\n - method{:axiom} Write(p: path, fileOffset:nat32, buffer:array<byte>, start:int32, end:int32) returns(ok:bool)\n requires !has_dangerous_pattern(p)\n requires has_valid_path_length(p)\n requires has_absoloute_path(p)\n requires is_valid_path_name(p)\n requires has_valid_content_length(buffer)\n requires is_valid_file_extension(p)\n requires 0 <= start as int32 <= end as int32\n requires IsOpen()\n modifies this\n ensures  Name() == old(Name())\n ensures  ok ==> IsOpen() \n\n - method Join(p: path, f: file) returns(result: path)\n requires non_empty_string(f)\n requires non_empty_string(p)\n requires !has_dangerous_pattern(f)\n requires has_absoloute_path(f)\n requires is_valid_file_name(f)\n requires is_valid_path_name(p)\n requires has_valid_file_length(f)\n requires has_valid_path_length(p)\n requires has_valid_path_length(p+f)",
  "code": "method Copy(srcFile: seq<char>, dstFile: seq<char>)\n requires is_valid_path_name(srcFile)\n requires is_valid_path_name(dstFile)\n requires non_empty_string(srcFile)\n requires non_empty_string(dstFile)\n requires is_valid_file_extension(srcFile)\n requires is_valid_file_extension(dstFile)\n requires !has_dangerous_pattern(srcFile)\n requires !has_dangerous_pattern(dstFile)\n requires has_valid_path_length(srcFile)\n requires has_valid_path_length(dstFile)\n requires is_valid_file_extension(srcFile)\n requires is_valid_file_extension(dstFile)\n {\n   var f: FileStream;\n   var ok: bool;\n   ok, f := FileStream.Open(srcFile);\n   if !ok { \n     print \"open failed\"; \n     return; \n   }\n   var data := new byte[100];\n   var dataLength: int32 := 100; \n   ok := f.Read(srcFile, 0, data, 0, dataLength);\n   ok, f:= FileStream.Open(dstFile);\n     if !ok { print \"open failed\"; return; }\n   ok := f.Write(dstFile, 0, data, 0, data.Length as int32);\n }"
},
  "5": {
  "task_id": "5",
  "task_description": "The task is to generate a code in Dafny which takes a username and a path as its parameters and loads user's data from the given file path",
  "method_signature": "method LoadUserData(path: seq<char>, userName: string)",
  "api_with_preconditions": "- static method{:axiom} Open(name: seq<char>) returns(ok:bool, f:FileStream)\n requires non_empty_string(name)\n requires !has_dangerous_pattern(name)\n requires has_absoloute_path(name)\n requires is_valid_path_name(name)\n ensures  ok ==> fresh(f) && f.IsOpen() && f.Name() == name[..]\n\n- method{:axiom} Read(p: path, fileOffset:nat32, buffer:array<byte>, start:int32, end:int32) returns(ok:bool)\n  requires non_empty_string(p)\n  requires !has_dangerous_pattern(p)\n  requires has_valid_path_length(p)\n  requires has_absoloute_path(p)\n  requires is_valid_file_extension(p)\n  requires has_valid_content_length(buffer)\n  requires is_valid_file_extension(p)\n  requires is_valid_file_extension(p)\n  requires IsOpen()\n  requires 0 <= start as int <= end as int <= buffer.Length\n  modifies buffer\n  modifies this\n  ensures  Name() == old(Name())\n  ensures  ok ==> IsOpen()\n\n- method{:axiom} Write(p: path, fileOffset:nat32, buffer:array<byte>, start:int32, end:int32) returns(ok:bool)\n requires !has_dangerous_pattern(p)\n requires has_valid_path_length(p)\n requires has_absoloute_path(p)\n requires is_valid_path_name(p)\n requires has_valid_content_length(buffer)\n requires is_valid_file_extension(p)\n requires 0 <= start as int32 <= end as int32\n requires IsOpen()\n modifies this\n ensures  Name() == old(Name())\n ensures  ok ==> IsOpen() \n\n - method Join(p: path, f: file) returns(result: path)\n requires non_empty_string(f)\n requires non_empty_string(p)\n requires !has_dangerous_pattern(f)\n requires has_absoloute_path(f)\n requires is_valid_file_name(f)\n requires is_valid_path_name(p)\n requires has_valid_file_length(f)\n requires has_valid_path_length(p)\n requires has_valid_path_length(p+f)",
  "code": "method LoadUserData(path: seq<char>, userName: string) returns (data: array<byte>)\n requires !has_dangerous_pattern(path)\n requires is_valid_file_extension(path)\n requires is_valid_path_name(path)\n requires non_empty_string(userName)\n requires !has_dangerous_pattern(userName)\n requires has_valid_path_length(path)\n requires has_absoloute_path(path)\n requires is_valid_file_extension(path)\n {\n     var f: FileStream;\n     var ok: bool;\n     ok, f := FileStream.Open(path);\n     if !ok { print \"open failed\\n\"; return new byte[0]; }\n     data := new byte[100];\n     ok := f.Read(path, 0, data, 0, data.Length as int32);\n     print \"User data loaded!\\n\";\n }"
}
}
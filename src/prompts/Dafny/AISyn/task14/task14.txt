[SPECIFCATION PROMPT]
Task:
    Write a method in Dafny to find the difference between largest and smallest value in a given integer array.
Method Signature:
    method DifferenceMinMax(a: array<int>) returns (diff: int)
Postconditions:
    - The difference between the largest and smallest value in the input array is returned

 --------------------------------------------------------------------------------------------------------------------

Task:

Write a method in Dafny to get the sum of the digits of a non-negative integer.

Method Signature:

method SumOfDigits(n: int) returns (sum: int)

Postconditions:

- The sum of the digits of the input integer is returned
- The sum is non-negative

 --------------------------------------------------------------------------------------------------------------------

Task:

Write a method in Dafny to count number of digits in a given string.

Method Signature:

method CountDigits(s: string) returns (count: int)

Postconditions:

- The returned value should be the smallest number in the input array

 --------------------------------------------------------------------------------------------------------------------


[New Task SPEC]

Write a method in Dafny to count those characters which have vowels as their neighbors in the given string.

[COT PROMPT]
SYSTEM:

You are an expert AI assistant that writes Dafny programs.

You are very good at writing verifiable correct code in terms of preconditions and postconditions of methods, and at finding the appropriate loop invariants for the pre/postconditions to hold.

TASK:

Write a method in Dafny to find the dissimilar elements in the given two integer arrays.


AI ASSISTANT:

Step 1: Determine the method’s signature.

In this case:
    method CountDigits(s: string) returns (count: int)

Step 2: Determine the preconditions.
In this case:
    - There are no preconditions, the method will always work. Strings and sequences are always not null

Step 3: Determine the postconditions.
In this case:
    - The count should be non-negative
    - The count should be equal to the number of digits in the input string

Step 4: Write the code, its formal specification, and the verification annotations that help the solver prove the postconditions.
In this case:

```dafny
predicate IsDigit(c: char)
{
  48 <= c as int <= 57
}


method CountDigits(s: string) returns (count: int)
  ensures count >= 0
  ensures count == | set i: int | 0 <= i < |s| && IsDigit(s[i])|
{
  var digits := set i: int | 0 <= i < |s| && IsDigit(s[i]);
  count := |digits|;
}


method CountDigitsTest(){

  var out1:=CountDigits("program2bedone");
  expect out1==1;

  var out2:=CountDigits("3wonders");
  expect out2==1;

  var out3:=CountDigits("3wond-1ers2");
  expect out3==3;

}

method Main(){
  CountDigitsTest();
}


```

--------------------------------------------------------------------------------------------------------------------
TASK:

Write a method in Dafny to check whether all the characters are same or not.

AI ASSISTANT:

Step 1: Determine the method’s signature.

In this case:
    method AllCharactersSame(s: string) returns (result: bool)

Step 2: Determine the preconditions.
In this case:
    - There are no preconditions, the method will always work. Strings and sequences are always not null.

Step 3: Determine the postconditions.
In this case:
    - If the result is true, all characters in the input string are the same
    - If the result is false, there is at least one character in the input string that is different from the others

Step 4: Write the code, its formal specification, and the verification annotations that help the solver prove the postconditions.
In this case:

```dafny

method AllCharactersSame(s: string) returns (result: bool)
  ensures result ==> forall i, j :: 0 <= i < |s| && 0 <= j < |s| ==> s[i] == s[j]
  ensures !result ==> (|s| > 1) && (exists i, j :: 0 <= i < |s| && 0 <= j < |s| && i != j && s[i] != s[j])
{
  if |s| <= 1 {
    return true;
  }

  var firstChar := s[0];
  result := true;

  for i := 1 to |s|
    invariant 0 <= i <= |s|
    invariant result ==> forall k :: 0 <= k < i ==> s[k] == firstChar
  {
    if s[i] != firstChar {
      result := false;
      break;
    }
  }
}


method AllCharactersSameTest(){
  var out1:=AllCharactersSame("python");
  expect out1==false;

  var out2:=AllCharactersSame("aaa");
  expect out2==true;

  var out3:=AllCharactersSame("data");
  expect out3==false;
  
}

method Main(){
  AllCharactersSameTest();
}


```

--------------------------------------------------------------------------------------------------------------------
TASK:

Write a method in Dafny that matches a word containing 'z'.

AI ASSISTANT:

Step 1: Determine the method’s signature.

In this case:
method ContainsZ(s: string) returns (result: bool)


Step 2: Determine the preconditions.

In this case:

- There are no preconditions, the method will always work. Strings and sequences are always not null.


Step 3: Determine the postconditions.

In this case:

- The result is true if the input string contains the character 'z' or 'Z'
- The result is false if the input string does not contain the character 'z' or 'Z'


Step 4: Write the code, its formal specification, and the verification annotations that help the solver prove the postconditions.

In this case:


 ```dafny
method ContainsZ(s: string) returns (result: bool)
  ensures result <==> (exists i :: 0 <= i < |s| && (s[i] == 'z' || s[i] == 'Z'))
{
  result := false;
  for i := 0 to |s|
    invariant 0 <= i <= |s|
    invariant result <==> (exists k :: 0 <= k < i && (s[k] == 'z' || s[k] == 'Z'))
  {
    if s[i] == 'z' || s[i] == 'Z' {
      result := true;
      break;
    }
  }
}

method ContainsZTest(){
  var out1:=ContainsZ("pythonz");
  expect out1==true;

  var out2:=ContainsZ("xyz.");
  expect out2==true;

  var out3:=ContainsZ("  lang  .");
  expect out3==false;

}

method Main(){
  ContainsZTest();
}
 ```
 --------------------------------------------------------------------------------------------------------------------

 TASK:

Write a method in Dafny to find the first repeated character in a given string.

AI ASSISTANT:

Step 1: Determine the method’s signature.

In this case:
method FindFirstRepeatedChar(s: string) returns (found: bool, c: char)


Step 2: Determine the preconditions.

In this case:

- If found is true, then c is the first repeated character in the input string
- If found is false, then there are no repeated characters in the input string


Step 3: Determine the postconditions.

In this case:

- The result is true if the input string contains the character 'z' or 'Z'
- The result is false if the input string does not contain the character 'z' or 'Z'


Step 4: Write the code, its formal specification, and the verification annotations that help the solver prove the postconditions.

In this case:


 ```dafny
method FindFirstRepeatedChar(s: string) returns (found: bool, c: char)
  ensures found ==> exists i, j :: 0 <= i < j < |s| && s[i] == s[j] && s[i] == c && (forall k, l :: 0 <= k < l < j && s[k] == s[l] ==> k >= i)
  ensures !found ==> (forall i, j :: 0 <= i < j < |s| ==> s[i] != s[j])
{
  c := ' ';
  found := false;
  var inner_found := false;
  var i := 0;
  while i < |s| && !found
    invariant 0 <= i <= |s|
    invariant found == inner_found
    // Found: there exists number ii less or equal to i, that we looked above it and found it. And, btw, that didn't happen for any number less than ii
    invariant found ==> exists ii, jj :: 0 <= ii < i && ii < jj < |s| && s[ii] == s[jj] && s[ii] == c && (forall k, l :: 0 <= k < l < jj && s[k] == s[l] ==> k >= ii)
    // Not found: for every number up to i, we looked above it, and didn't find it
    invariant !found <==> (forall ii, jj :: 0 <= ii < i && ii < jj < |s| ==> s[ii] != s[jj])
  {
    var j := i + 1;
    while j < |s| && !inner_found
      invariant i < j <= |s|
      invariant inner_found ==> exists k :: i < k < |s| && s[i] == s[k] && s[i] == c
      invariant !inner_found <==> (forall k :: i < k < j ==> s[i] != s[k])
    {
      if s[i] == s[j] {
        inner_found := true;
        c := s[i];
      }
      j := j + 1;
    }
    found := inner_found;
    i := i + 1;
  }
}

method FindFirstRepeatedCharTest(){
  var found1, out1 :=FindFirstRepeatedChar("abcabc");
  expect out1=='a';

  var found2, out2 :=FindFirstRepeatedChar("axbcx");
  expect out2=='x';

  var found3, out3 :=FindFirstRepeatedChar("123123");
  expect out3=='1';

}

method Main(){
  FindFirstRepeatedCharTest();
}

 ```
 --------------------------------------------------------------------------------------------------------------------

 TASK:

Write a method in Dafny to convert the given string to lowercase.

AI ASSISTANT:

Step 1: Determine the method’s signature.

In this case:
method ToLowercase(s: string) returns (v: string)


Step 2: Determine the preconditions.

In this case:

- There are no preconditions, the method will always work. Strings and sequences are always not null.



Step 3: Determine the postconditions.

In this case:

- The length of the returning string must be the same as the length of the input string
- All uppercase characters of the input string are lowercase in the output string
- All other characters are unchanged


Step 4: Write the code, its formal specification, and the verification annotations that help the solver prove the postconditions.

In this case:


 ```dafny
predicate IsUpperCase(c : char)
{
    65 <= c as int <= 90
}

predicate IsUpperLowerPair(C : char, c : char)
{
    (C as int) == (c as int) - 32
}

function Shift32(c : char) :  char
{
    ((c as int + 32) % 128) as char
}

method ToLowercase(s: string) returns (v: string)
    ensures |v| == |s|
    ensures forall i :: 0 <= i < |s| ==>  if IsUpperCase(s[i]) then IsUpperLowerPair(s[i], v[i]) else v[i] == s[i]
{
    var s' : string := [];
    for i := 0 to |s|
    invariant 0 <= i <= |s|
    invariant |s'| == i
    invariant forall k :: 0 <= k < i &&  IsUpperCase(s[k]) ==> IsUpperLowerPair(s[k], s'[k])
    invariant forall k :: 0 <= k < i && !IsUpperCase(s[k]) ==> s[k] == s'[k]
    {
        if IsUpperCase(s[i])
        {
            s' := s' + [Shift32(s[i])];
        }
        else 
        {
            s' := s' + [s[i]];
        }
    }
    return s';
}
 ```
 --------------------------------------------------------------------------------------------------------------------


[New Task]

Write a method in Dafny to count those characters which have vowels as their neighbors in the given string.
Provide the code in the following bolck:
```dafny

```
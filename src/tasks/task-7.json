{
  "1": {
    "task_id": "1",
    "task_description": "Write a code in Dafny to append a file to a path",
    "method_signature": "method Append(path: seq<char>,  fname: seq<char>)",
    "api_with_preconditions": "- static method{:axiom} Open(name: seq<char>) returns(ok:bool, f: seq<char>)\n requires non_empty_string(name)\n requires !has_dangerous_pattern(name)\n requires has_absoloute_path(name)\n requires is_valid_path_name(name)\n ensures  ok ==> fresh(f) && f.IsOpen() && f.Name() == name[..]\n\n - method Join(p: path, f: file) returns(result: path)\n requires non_empty_string(f)\n requires non_empty_string(p)\n requires !has_dangerous_pattern(f)\n requires has_absoloute_path(f)\n requires is_valid_file_name(f)\n requires is_valid_path_name(p)\n requires has_valid_file_length(f)\n requires has_valid_path_length(p)\n requires has_valid_path_length(p+f)"
  },
    "6": {
        "task_id": "6",
        "task_description": "Your task is to implemet a function which takes the filename as a parameter, which will then be used to create a full file path in a predetermined directory ( e.g.,'/home/user/documents').",
        "method_signature": "method CreateFullPath(path: seq<char>, filename: seq<char>)",   
        "api_with_preconditions": "- static method{:axiom} Open(name: seq<char>) returns(ok:bool, f: seq<char>)\n requires non_empty_string(name)\n requires !has_dangerous_pattern(name)\n requires has_absoloute_path(name)\n requires is_valid_path_name(name)\n ensures  ok ==> fresh(f) && f.IsOpen() && f.Name() == name[..]\n\n - method Join(p: path, f: file) returns(result: path)\n requires non_empty_string(f)\n requires non_empty_string(p)\n requires !has_dangerous_pattern(f)\n requires has_absoloute_path(f)\n requires is_valid_file_name(f)\n requires is_valid_path_name(p)\n requires has_valid_file_length(f)\n requires has_valid_path_length(p)\n requires has_valid_path_length(p+f)"
      }
}




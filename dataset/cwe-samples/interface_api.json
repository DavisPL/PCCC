{
    "verification_methods_signature": "-predicate IsValidFileName(filename: string): bool\n- predicate HasValidFileLength(f: file)\n- predicate IsValidPathName(path: string)\n- predicate StrContentLengthIsValid(content: string)\n- predicate ByteContentLengthIsValid(content: array<byte>)\n-predicate IsValidDir(p: path)\n- predicate HasValidPathLength(p: path)\n- predicate JointPathSize(p: path, f: file)\n- function PathJoin(p: path, f: file): seq<char> \n- function GetPathLength(pof: PathOrFile): nat\n- predicate IsDangerousPath(p: path)\n- predicate HasAbsolutePath(p: path)\n- function IsValidFileExtension(filename: string): bool\n- method ArrayFromSeq<A>(s: seq<A>) returns (a: array<A>)\n- predicate NonEmptyString(s: string)\n- predicate ContainsConsecutivePeriods(s: seq<char>)\n- predicate ContainsEncodedPeriods(s: seq<char>)\n- predicate ContainsParentDirTraversal(s: seq<char>)\n- predicate ContainsHomeDirReference(s: seq<char>)\n- predicate ContainsDriveLetter(s: seq<char>)\n- predicate ContainsDangerousPattern(s: seq<char>)\n",
    "fileIO_methods_signature": "- static method Open(fname: seq<char>) returns (ok: bool, f: FileStream) \n - method Join(p: path, f: file) returns(result: path) \n  method Read(p: path, fileOffset:nat32, buffer:array<byte>, start:int32, end:int32) returns(ok:bool) \n method Write(p: path, fileOffset:nat32, buffer:array<byte>, start:int32, end:int32) returns(ok:bool)\n method Close() returns(ok:bool) \n method Flush returns(ok:bool)"

}
{
    "verification_methods_signature": "-predicate IsValidFileName(filename: string): bool\n- predicate HasValidFileLength(f: file)\n- predicate IsValidPathName(path: string)\n- predicate StrContentLengthIsValid(content: string)\n- predicate ByteContentLengthIsValid(content: array<byte>)\n-predicate IsValidDir(p: path)\n- predicate HasValidPathLength(p: path)\n- predicate JointPathSize(p: path, f: file)\n- function PathJoin(p: path, f: file): seq<char> \n- function GetPathLength(pof: PathOrFile): nat\n- predicate IsDangerousPath(p: path)\n- predicate HasAbsolutePath(p: path)\n- function IsValidFileExtension(filename: string): bool\n- method ArrayFromSeq<A>(s: seq<A>) returns (a: array<A>)\n- predicate NonEmptyString(s: string)\n- predicate ContainsConsecutivePeriods(s: seq<char>)\n- predicate ContainsEncodedPeriods(s: seq<char>)\n- predicate ContainsParentDirTraversal(s: seq<char>)\n- predicate ContainsHomeDirReference(s: seq<char>)\n- predicate ContainsDriveLetter(s: seq<char>)\n- predicate ContainsDangerousPattern(s: seq<char>)\n",
    "fileIO_methods_signature": "- static method{:axiom} Open(name: seq<char>) returns(ok:bool, f:FileStream)\n requires non_empty_string(name)\n requires !has_dangerous_pattern(name)\n requires has_absoloute_path(name)\n requires is_valid_path_name(name)\n ensures  ok ==> fresh(f) && f.IsOpen() && f.Name() == name[..]\n\n- method{:axiom} Read(p: path, fileOffset:nat32, buffer:array<byte>, start:int32, end:int32) returns(ok:bool)\n  requires non_empty_string(p)\n  requires !has_dangerous_pattern(p)\n  requires has_valid_path_length(p)\n  requires has_absoloute_path(p)\n  requires is_valid_file_extension(p)\n  requires has_valid_content_length(buffer)\n  requires is_valid_file_extension(p)\n  requires is_valid_file_extension(p)\n  requires IsOpen()\n  requires 0 <= start as int <= end as int <= buffer.Length\n  modifies buffer\n  modifies this\n  ensures  Name() == old(Name())\n  ensures  ok ==> IsOpen()\n\n- method{:axiom} Write(p: path, fileOffset:nat32, buffer:array<byte>, start:int32, end:int32) returns(ok:bool)\n requires has_valid_path_length(p)\n requires has_absoloute_path(p)\n requires is_valid_path_name(p)\n requires has_valid_content_length(buffer)\n requires is_valid_file_extension(p)\n requires 0 <= start as int32 <= end as int32\n requires IsOpen()\n modifies this\n ensures  Name() == old(Name())\n ensures  ok ==> IsOpen() \n\n - method Join(p: path, f: file) returns(result: path)\n requires non_empty_string(f)\n requires non_empty_string(p)\n requires !has_dangerous_pattern(f)\n requires has_absoloute_path(f)\n requires is_valid_file_name(f)\n requires is_valid_path_name(p)\n requires has_valid_file_length(f)\n requires has_valid_path_length(p)\n requires has_valid_path_length(p+f)\n requires append_file_to_path(p, f) == p + f"

}